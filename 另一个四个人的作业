一、总体目标分析:
1.总的目标是要设计一个类似qq一样的聊天程序。
2.服务器端界面：可以控制端口的开启与关闭，可以看到连接服务器的客户机一样详细信息，包括用户名、密码以及登录地址等。
3.服务器端与客户端通信：服务器端要能与客户端实现一对一的通信，还能实现一对多的“群聊”还要能实现“踢人”功能。
4.客户端包括登陆界面和聊天界面，在登陆界面需要先注册才能进行登录，聊天界面中，可以看到在线好友，可以实现客户端与客户端的一对一同信，也可以实现所有客户端之间的“群聊”，以及与服务器的通信。
5.可以传输文件以及图片。
二、过程分析：
在整个服务器端的设计中，主要分为四个类：
ServerUl.java
Server.java
ServerThread.java
User.java
(1)、ServerUl.java：
这个类主要是用来设计服务器端的界面。这个类中包括一些基本的界面属性，如窗体、输入框、按钮等。这里要说明的是含有一个整型的port属性，这里是要从输入框中获取，然后传入到Server.java类中
去绑定服务器；有一个Server类对象server,这个对象在点击“开启”按钮后创建；有三个JTexArea类对象，用于显示文字，由于在其他类中也可能用到，而且这些对象是唯一的，因此将他们申明为static类型，
便于在其他类中直接用类名来调用。
这个类的方法主要是两个监听器里面的方法。在这里，为按钮添加监听器使用了简写的形式。
//给按钮添加监听器，开启后马上获取端口号，开启相应服务器
jb_start.addActionListener(new ActionListener(){
public void actionPerformed(ActionEvent e){
//调用开启服务器的方法
startAction(e);
}
});
在开启按钮的监听事件中，首先要改变按钮中的文字，要实现既能开启也能关闭，然后就是开启对应端口的服务器，这个过程如下:
首先获取端口号:
this.port=Integer.parseInt(jt_port.getText());
然后将这个端口号通过创建Server对象的方式传入Server类中去开启对应端口的服务器
server = new Server(port);      //创建服务器类对象
server.createServer();          //调用相应的方法创建相应服务器
server.start();
在Server类是一个继承了线程的类，因此用到了启动线性的方法这里放于Server类中讲。到这一步，如果不出意外，一个对应端口的服务器就创建好了，只等着客户机的连接了。
在发送按钮的监听事件中，首先要判断服务器是否开启，只有服务器开启才能发送消息。若服务器开启，下一步就是要获取输入输入框中的字符串(发送消息当然要知道发送什么），得到字符串后就要调用方法了，
这一步困难了，发送消息方法在处理客户机连接的线程类中定义（考虑到每个客户端都要通信),怎么样才能调用这个方法能，注意到，每当有客户机连接上时，就创建一个线程对象去处理，而该线程对象就被放进
一个列队中（该列队在Server类中定义），因此只要将该队列定义为static类型即可解决此问题。
for(int i = 0;i<Server.stList.size();i++){     //给每个客户端都发送该消息
Server.stList.get(i).sendMessage(server_input);
}
（2）、Server.java:
这个类主要负责创建服务器、等待客户端的连接、创建处理客户端连接的线程对象、将该线程对象加入到队列中。
在创建服务器之前要先预存进10个用户名
static{
  for(int i=o;i<10;i++)
    Uers u=new Uers("poe"+i、
    System.out.println("生成用户名；
    userDB.put(u.getName(),u);
       }
    }
这是一段静态块代码，会在程序运行时先执行，且只执行一次，不需要对象来调用。
对与服务器的创建，其实很简单，只需要知道端口只用一个语句即可
public viod createSerever(){
   try {
        server=new ServerSocket(po
        Sytem.out.println("服务器"+
        }catch(IOException e){
        }
       }
然后就是等待客户端连接请求，当程序运行到这里的时候，系统就会阻塞在这个地方,直到有客户机请求成功，当然我们不希望我们的服务器只链接上一个客户机就再也不能被
其他客户机连接了，所以我们将这个连接请求放在一个死循环中，每当一个客户机连接上后，就创建一个线程处理对象去处理该客机的连接，系统又再次进入等待状态。死循环
这又是一个要考虑的问题，因为我们不能让我们的程序陷入死循环中看，因此只能将其放入线程中。
public void run(){
    while (true){
    try{
      Socket client=server.accect();
      System.out.println("客户机连接上，等待验证用户名和密码")
          ServerUI.area_num.setText(""+stList.size());
    }catch(Exception e){
          e.printStackTrace();  
   }
   } 
   }
}
      
（3）、ServerThread.java
这类主要使用来处理客户机的连接，包括收发消息，因此这个类的一个对象就相当于一个客户机。在这个类中，收发消息的方法也存在延迟，就好像系统会一直停在那，直到客户机发来消息。同样将这个方法
放于一个线程中，置于死循环转态。
发送消息主要用到输出流的write()方法
//服务器发送消息的方法
       pulic void sendMessage(String mesg){
             mesg  +-"\r";
             System.out.println(服务器要发送的消息是："+ mesg)；
             byte[]data=mesg.getBytes();//获取要发送字符串的字节数组
             try{
                   ous.write（data);//发送字节数组
             }catch(IOException e）{
                   e.printStackTrace();
             }
       }
接收消息用到readLine()方法
br=new BufferredReader(new InputStreamReader(ins));
String recieve=br.readLine();//获得收到的消息
若要进行账号和密码的判断，就可以在这个方法中进行，在这个程序中，我预先存入了10个用户，暂时只能用这10个用户名和密码登录。在这里可以先设置一个整型的计数器count（全局变量）
用它来记录服务器收到的消息的条数。因为使用的是readLine()方法接收消息，因此服务器相当于每次接受的是一条消息，没接受到一条消息count自动加1，利用消息发来的序号来判断该消息是用户名还是密码或是聊天消息。)
if(count==1){//第一条为用户名
      user.setName(recieve);
      System.out.println(客户机输入的用户名是；"+recieve);
}
if(count==2){//第二条为密码
       user.setPass(recieve);
       System.out.println("客户机输入的密码是："+recieve);
       if(!User.checkUser(user)){
               closeClient();
               return;
       }
       Server.userDB.get(user.getName()).setOline(true);//设置标志为true，表示该用户已上线，禁止其他人再次使用该用户登录
       ServerUI.area_recive.append(user.getName()+"上线\n");
 }
 if (count＞＝3）{//第二条以后的是聊天信息，显示在聊天板上
         recieve = user.getName()+":"+recieve+"\n";
         ServerUI.area_recive.append(recieve);//将接收的消息加入到消息显示框中
                         }
（4）、User.java
这是一个用户类，这个类比较简单，主要是将用户的信息打包，包含用户名、密码、登录地址等一些信息。在这个方法中还定义了一个判断用户是否合法的static类型的方法，该方法用于客户端登陆时，对客户端发来的用户名
和密码进行验证，只有用户名和密码都正确才能进行聊天。
     // 判断用户名是否合法
     public static boolean checkUser(User u) {
              if (Server.userDB.containsKey(u.getName()))  {  //用户数据库中包含该用户名的用户
                    if (!Server.userDB.get(u.getName().isOnline() {  //该用户名没有被登录
                                System.out.println("该用户名还没有上线”）；
                                if  (u.getPass()
                                                          .equals(Server.userDB.get(u.getName()).getPass())) //密码正确
                                                 return true
                                }
                        }
                        return false
               }
   到此，整个服务器端设计的类结构已经分析完了。
   三、总结
   在这个简单的服务器的设计中，我们用了大约十天的时间，从最开始的一行代码一步步走到了现在的几百行代码；从最开始只能写出始极简单的服务器，到现在的功能还算全面的服务器；在这个过程中也是付出了一定的时间和
   精力，也遇到了一些困难和疑惑，幸运的是，在我们的身边聚集了一群热情、勇于探索的盟友，是他们帮我们走出困境。
               
                                                          
