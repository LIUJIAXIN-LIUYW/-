给计算机写白盒测试用例
Calculator代码

package main.cn.edu.ciir;

public class Calculator {
public int result=0;
public int n1;
public int n2;
public int getResult() {
   return result;
   }
public int getN1() {
   return n1;
   }
public void setN1(int n1) {
    this.n1=n1;
   }
public int getN2(){
   return n2;
   }
public int getN2(int n2)  {
    this.n2=n2;
    }
public void add(int n1,int n2){
     this.result=n1+n2;
    
    
    }
public void mul(){
  this.result=this.n1/this.n2;
}
public void qiumo(){
  this.result=(this.n1)/(this.n2);
}
public int getmax(){
  return this.n1>this.n2?
this.n1:this.n2;
}
public int Biggestgongyue(int a,int
b){
  if(a>b){
    int temp=a;
    a=b;
    b=temp;
  }
  if(b%a==0)return a;
  else return
Biggestgongyue(a,b%a);
}
public int gongbei(int a,int b)
{
  return(a*b)/
this.Biggestgongyue(a,b);
  }
}
    package test.cn.edu.ciir;
    import junit.framework.
    TestCase;
    import main .cn.edu.ciir.Sample2;
    public class CaculatorTest
    extends TestCase{
    Calculator cal=new Calculator();
    public void test相加后整数溢出（）{
    try{
    cal.add(2147483640,8);
    fail("2147483640和8相加后，会导致整数溢出，“+
    “函数应该检测到这个问题并抛出异常通知！”；
    }catch
    （ArithmeticException e){
    }
    }
    public void testAddtrue(){
    //cal.setN1(3);
    //cal.setN2(4);
    cal.add(3,4):
    assertEquals(7,cal.getResult());
    }
    public void testAddfalse(){
    //cal.set.N1(3);
    cal.add(3,4);
    asserEqual s(3,cal.getResult());
    }
    public void testsutruet(){
    cal.setN1(7);
    cal.setN2(4);
    cal.sub();
    aaddertEquals(3,cal.getRsult());
    }
    public void tesstmultrue(){
    cal.set1N(7);
    cal.subN2(4);
    assertEquals(3,cal.geiResult());
    }
    public void testsubfalse(){
    cal.setN1(7);
    cal.setN2(4);
    cal.sub();
    assertEquals(28,cal.getResult());
    }
    public void testmufalse(){
    cal,setN1(7);
    cal.setN2(4);
    cal.mul();
    asserEqual s(29,cal.getResult());
    }
    public void testdivtrue(){
    cal.setN1(28);
    cal.setN2(4);
    cal.div();
    asserEquals(7,cal.getResult());
    }
    public void testdivfalse()
    {
    cal.setN1(28);
    cal.setN2(4);
    cal.div();
    assertEquals(8,cal.getResult());
    }
    public void testqiuyufalse()
    {
    cal.setN1(28);
    cal.setN2(3);
    cal.qiuyu();
    assertEquals(1,cal.getResult());
    }
    public void testqiuyufalse()
    {cal.setN1(28);
   
   int mian(int argc,char *argv[])
}
int 0;
while (-1!=(0=getopt(argc,argv,"hD")))
{switch(0)
{case'D':daemonize();
break;
default:
show_help();
return-1;
}
}cal.setN2(3);
    cal.qiuyu();
    assertEquals(2,cal.getResult());
    }
    public void testqiumotrue()
    {
    cal.setN1(28);
    cal.setN2(3);
    cal.qiumo();
    public void testgongbeitrue(){
         cal.setN1(28);
         cal.setN2(4);
         assertEqual s(3,cal.Biggestgongyue(cal.getN2()));
         }
    public  void testgongbeifalse(){
         cal.setN1(28);
         cal.setN2(4);
         cal.Biggestgongyue(cal.getN1(),cal.getN2());
         assertEquals(29,cal.gongbei(cal.getN1(),cal.getN2()));
    }
}    


  
    
    
    
    
    
   
